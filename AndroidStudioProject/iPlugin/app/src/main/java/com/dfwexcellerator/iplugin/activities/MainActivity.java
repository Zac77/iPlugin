/**
 * Main activity for this app.
 * This activity is the basic frame of this app and in charge of switch fragments.
 *
 * If no special mentioned, code is generated by Android Studio automatically
 * when creating a new "Navigation Drawer" activity.
 *
 * @author Zac (Qi ZHANG)
 * Created on 09/23/2014.
 */
package com.dfwexcellerator.iplugin.activities;

import android.app.Activity;
import android.app.ActionBar;
import android.app.AlertDialog;
import android.app.FragmentManager;
import android.content.DialogInterface;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.Menu;
import android.support.v4.widget.DrawerLayout;
import android.widget.Toast;

import com.dfwexcellerator.iplugin.R;
import com.dfwexcellerator.iplugin.fragments.BasementFragment;
import com.dfwexcellerator.iplugin.fragments.MyPluginsFragment;
import com.dfwexcellerator.iplugin.fragments.NavigationDrawerFragment;
import com.dfwexcellerator.iplugin.fragments.ShopFragment;
import com.dfwexcellerator.iplugin.helpers.Constants;

public class MainActivity extends Activity
        implements NavigationDrawerFragment.NavigationDrawerCallbacks {
    private static final String TAG = "MainActivity";

    // A variable to implement "press back again to quit" feature
    private boolean doubleBackToExitPressedOnce = false;

    // A variable to save the status which is if need to go back to the "My Plugins" fragment
    private boolean needBackToMyPluginsFragment;

    /**
     * Fragment managing the behaviors, interactions and presentation of the navigation drawer.
     */
    private NavigationDrawerFragment mNavigationDrawerFragment;

    /**
     * Used to store the last screen title. For use in {@link #restoreActionBar()}.
     */
    private CharSequence mTitle;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mNavigationDrawerFragment = (NavigationDrawerFragment)
                getFragmentManager().findFragmentById(R.id.navigation_drawer);
        mTitle = getTitle();
        needBackToMyPluginsFragment = false;

        // Set up the drawer.
        mNavigationDrawerFragment.setUp(
                R.id.navigation_drawer,
                (DrawerLayout) findViewById(R.id.drawer_layout));
    }

    @Override
    public void onNavigationDrawerItemSelected(int position) {
        // update the main content by replacing fragments
        final FragmentManager fragmentManager = getFragmentManager();

        /*
        Zac: Modified this part to customize our drawer.
        Auto-generated code:
        fragmentManager.beginTransaction()
                    .replace(R.id.container, PlaceholderFragment.newInstance(position + 1))
                    .commit();
         */
        boolean fragmentNeedToChange = false;
        if (position <= 2) {
            String[] titles = getResources().getStringArray(R.array.navigation_drawer_items);
            if (mTitle != titles[position]) {
                mTitle = titles[position];
                fragmentNeedToChange = true;
            }
        }
        if (fragmentNeedToChange) {
            final BasementFragment baseFragment = (BasementFragment) getFragmentManager()
                    .findFragmentById(R.id.container);
            switch (position) {
                case 0: // Embed "My Plugins" fragment
                    needBackToMyPluginsFragment = false;
                    if (baseFragment != null)
                        baseFragment.cancelAsyncTask();
                    fragmentManager
                            .beginTransaction()
                            .replace(R.id.container, new MyPluginsFragment())
                            .commit();
                    break;
                case 1: // Embed "Shop" fragment
                    needBackToMyPluginsFragment = false;
                    if (baseFragment != null)
                        baseFragment.cancelAsyncTask();
                    fragmentManager
                            .beginTransaction()
                            .replace(R.id.container, new ShopFragment())
                            .commit();
                    break;
                case 2: // Logout
                    new AlertDialog.Builder(MainActivity.this)
                            .setMessage(R.string.alert_dialog_message_logout)
                            .setCancelable(true)
                            .setPositiveButton(R.string.alert_dialog_button_ok,
                                    new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int which) {
                                            getSharedPreferences(Constants.PREFS_FILE_NAME,
                                                    MODE_PRIVATE)
                                                    .edit()
                                                    .clear()
                                                    .putBoolean("hasSavedUser", false)
                                                    .apply();
                                            if (baseFragment != null)
                                                baseFragment.cancelAsyncTask();
                                            finish();
                                        }
                                    })
                            .setNegativeButton(R.string.alert_dialog_button_cancel, null)
                            .show();
                    break;
                default:
                    Log.e(TAG,
                            "Method onNavigationDrawerItemSelected(int) got a wrong parameter: position = "
                                    + position);
            }
        }
    }

    public void restoreActionBar() {
        ActionBar actionBar = getActionBar();
        actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);
        actionBar.setDisplayShowTitleEnabled(true);
        actionBar.setTitle(mTitle);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        if (!mNavigationDrawerFragment.isDrawerOpen()) {
            // Only show items in the action bar relevant to this screen
            // if the drawer is not showing. Otherwise, let the drawer
            // decide what to show in the action bar.

            /*
            Zac: Delete options menu
            getMenuInflater().inflate(R.menu.home, menu);
            */

            restoreActionBar();
            return true;
        }
        return super.onCreateOptionsMenu(menu);
    }

    /**
     * To implement "press back again to quit" feature.
     *
     * Reference:
     * http://stackoverflow.com/questions/8430805/android-clicking-twice-the-back-button-to-exit-activity
     * http://stackoverflow.com/questions/3226495/android-exit-application-code#comment12795710_3226743
     */
    @Override
    public void onBackPressed() {
        if (mNavigationDrawerFragment.isDrawerOpen())
            mNavigationDrawerFragment.closeDrawer();
        else if (needBackToMyPluginsFragment) {
            needBackToMyPluginsFragment = false;
            getFragmentManager()
                    .beginTransaction()
                    .replace(R.id.container, new MyPluginsFragment())
                    .commit();
        } else {
            if (doubleBackToExitPressedOnce) {
                moveTaskToBack(true);
                return;
            }
            this.doubleBackToExitPressedOnce = true;
            Toast.makeText(this, getString(R.string.toast_exit), Toast.LENGTH_SHORT).show();
            new Handler().postDelayed(new Runnable() {
                @Override
                public void run() {
                    doubleBackToExitPressedOnce = false;
                }
            }, Constants.TIME_LIMIT_TO_EXIT);
        }
    }

    /**
     * Set needBackToMyPluginsFragment to true.
     */
    public void setNeedBackToMyPluginsFragment(boolean ifNeed) {
        this.needBackToMyPluginsFragment = ifNeed;
    }

    /*
    Zac: Delete the options menu.
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        return id == R.id.action_settings || super.onOptionsItemSelected(item);
    }
    */

    /*
    Zac: Delete this unused class and related method.
    public static class PlaceholderFragment extends Fragment {
        // The fragment argument representing the section number for this fragment.
        private static final String ARG_SECTION_NUMBER = "section_number";

        // Returns a new instance of this fragment for the given section number.
        public static PlaceholderFragment newInstance(int sectionNumber) {
            PlaceholderFragment fragment = new PlaceholderFragment();
            Bundle args = new Bundle();
            args.putInt(ARG_SECTION_NUMBER, sectionNumber);
            fragment.setArguments(args);
            return fragment;
        }

        public PlaceholderFragment() {
        }

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                Bundle savedInstanceState) {
            return inflater.inflate(R.layout.fragment_home, container, false);
        }

        @Override
        public void onAttach(Activity activity) {
            super.onAttach(activity);
            ((MainActivity) activity).onSectionAttached(
                    getArguments().getInt(ARG_SECTION_NUMBER));
        }
    }

    public void onSectionAttached(int number) {
        switch (number) {
            case 1:
                mTitle = getString(R.string.title_section1);
                break;
            case 2:
                mTitle = getString(R.string.title_section2);
                break;
            case 3:
                mTitle = getString(R.string.title_section3);
                break;
        }
    }
    */

}
